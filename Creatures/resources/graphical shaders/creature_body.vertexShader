#version 460 core
layout (location = 0) in vec2 aVertexLocalPos;

layout (std430, binding = 0) buffer CreatureSkinRGBColors
{
	float SkinRGBColors[];
};

layout (std430, binding = 1) buffer CreaturePositions
{
	vec2 Positions[];
};

layout (std430, binding = 2) buffer CreatureForwardDirections
{
	vec2 ForwardDirections[];
};

layout (std430, binding = 3) buffer CreatureAngles
{
	float Angles[];
};

layout (std430, binding = 4) buffer CreatureRadii
{
	float Radii[];
};

layout (std430, binding = 5) buffer CreatureLives
{
	float Lives[];
};

layout (std430, binding = 6) buffer CreatureEnergies
{
	float Energies[];
};

layout (std430, binding = 7) buffer CreatureSkinPatterns
{
	vec2 SkinPatterns[];
};

layout (std430, binding = 8) buffer CreatureCollidersPositions
{
	vec2 CollidersPositions[];
};

layout (std430, binding = 9) buffer CreatureCollidersRadii
{
	float CollidersRadii[];
};

layout (std430, binding = 10) buffer CreatureCollidersCounts
{
	uint CollidersCounts[];
};

layout (std430, binding = 11) buffer CreatureSpikes
{
	vec4 Spikes[];
};

layout (std430, binding = 12) buffer CreatureFeeders
{
	vec4 Feeders[];
};

layout (std430, binding = 13) buffer CreatureShields
{
	vec4 Shields[];
};


uniform mat4 uTransform;
uniform uint uMaxNumOfColliders;


// Per vertex values
out float oVertexSquaredDistance;
out vec2 oEuclideanPos;

out float oShieldDirectionDot;
out vec2 oSpikeEuclideanPos;
out vec2 oFeederEuclideanPos;

// Per instance values
flat out vec4 oVertexColor;
flat out vec2 oSkinPattern;
flat out float oEnergy;
flat out float oSpikeState;
flat out float oFeederState;
flat out float oShieldState;
flat out float oShieldSpan;

void main()
{

	uint colIndex = gl_InstanceID * 3;

	// Collect data
	vec2 creatureCenterPos = Positions[gl_InstanceID];
	float creatureRadius = Radii[gl_InstanceID];
	float creatureAngle = Angles[gl_InstanceID];
	float creatureEnergy = Energies[gl_InstanceID];
	vec2 creatureSkinPattern = SkinPatterns[gl_InstanceID];
	vec2 creatureForwardDir = ForwardDirections[gl_InstanceID];
	vec3 creatureColor = vec3(SkinRGBColors[colIndex], SkinRGBColors[colIndex + 1], SkinRGBColors[colIndex + 2]);
	
	vec4 creatureSpike = Spikes[gl_InstanceID];
	vec4 creatureFeeder = Feeders[gl_InstanceID];
	vec4 creatureShield = Shields[gl_InstanceID];
	
	vec2 creatureSpikeDir = creatureSpike.xy;
	float creatureSpikeState = creatureSpike.z;

	vec2 creatureFeederDir = creatureFeeder.xy;
	float creatureFeederState = creatureFeeder.z;
	
	vec2 creatureShieldDir = creatureShield.xy;
	float creatureShieldState = creatureShield.z;
	float creatureShieldSpan = creatureShield.w;



	// Rotate by creature angle
	float cosAng = cos(creatureAngle);
	float sinAng = sin(creatureAngle);
	vec2 rotatedLocalVertPos = vec2(
		cosAng * aVertexLocalPos.x + sinAng * aVertexLocalPos.y,
		-sinAng * aVertexLocalPos.x + cosAng * aVertexLocalPos.y
	);


	// Body deformations

	vec2 vertPos = creatureCenterPos + rotatedLocalVertPos * creatureRadius;
	
	// @TODO: Cull calculations if we're off screen

	// Iterate deformers to deform the mesh
	float pushBack = 0.0;
	uint deformersCount = min(CollidersCounts[gl_InstanceID], uMaxNumOfColliders);
	uint deformersStartIndex = gl_InstanceID * uMaxNumOfColliders;
	for (uint deformer = 0; deformer < deformersCount; deformer++)	{
		
		uint deformerIndex = deformersStartIndex + deformer;
		
		// Find our deformer's position and radius
		vec2 deformerPos = CollidersPositions[deformerIndex];
		float deformerRad = CollidersRadii[deformerIndex];

		vec2 deformerPosToVert = vertPos - deformerPos;
		float deformerPosToVertDistance = length(deformerPosToVert);
		vec2 creaturesPosDiff = deformerPos - creatureCenterPos;
		
		// Find the vertex violation
		float vertViolation = max(deformerRad - deformerPosToVertDistance, 0);
		
		// Find the length of the creatures' position difference, used for normalization without sqrt
		float creaturesPosDiffLength = deformerRad + creatureRadius - vertViolation;

		// The new pushback value is the violation, multiplied by a dot factor; the closer we are to the creaturesPosDiff direction,
		// the less we need be pushed back. This is a linear device used to approximate the result of an otherwise non-linear function
		float newPushback = vertViolation * (1.0 - 0.5 * dot(creaturesPosDiff / creaturesPosDiffLength, rotatedLocalVertPos));
		pushBack = max(pushBack, newPushback);
	}

	// Finalize this vertex's deformation
	vertPos -= rotatedLocalVertPos * pushBack;



	// Output values

	// Transform our vertex to camera space
	vec4 camTransformed = uTransform * vec4(vertPos.xy, 0.0, 1.0);
	gl_Position = camTransformed;

	// Per instance
	oVertexColor = vec4(creatureColor.xyz, 1.0);
	oSkinPattern = creatureSkinPattern;
	oEnergy = creatureEnergy;
	oShieldState = creatureShieldState;
	oShieldSpan = creatureShieldSpan;
	oFeederState = creatureFeederState;
	oSpikeState = creatureSpikeState;

	// Per vertex
	oVertexSquaredDistance = dot(rotatedLocalVertPos, rotatedLocalVertPos);
	oEuclideanPos = aVertexLocalPos;
	
	oShieldDirectionDot = dot(rotatedLocalVertPos, creatureShieldDir);

	// Build our local euclidean spaces by accounting dot products with a direction and its ortho direction
	// We need to do this because procedurally drawing shapes such as the spike/feeder is difficult in non-euclidean space

	vec2 creatureSpikeOrthoDir = vec2(creatureSpikeDir.y, -creatureSpikeDir.x);
	oSpikeEuclideanPos = vec2(dot(creatureSpikeOrthoDir, rotatedLocalVertPos), dot(creatureSpikeDir, rotatedLocalVertPos));

	vec2 creatureFeederOrthoDir = vec2(creatureFeederDir.y, -creatureFeederDir.x);
	oFeederEuclideanPos = vec2(dot(creatureFeederOrthoDir, rotatedLocalVertPos), dot(creatureFeederDir, rotatedLocalVertPos));
}