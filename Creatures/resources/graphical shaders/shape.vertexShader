#version 460 core
layout (location = 0) in vec2 aPos;
layout (location = 1) in vec2 aNrm;


layout (std430, binding = 0) buffer CreatureColors
{
	float Colors[];
};

layout (std430, binding = 1) buffer CreaturePositions
{
	vec2 Positions[];
};

layout (std430, binding = 2) buffer CreatureRadii
{
	float Radii[];
};

layout (std430, binding = 3) buffer CreatureLives
{
	float Lives[];
};

layout (std430, binding = 4) buffer CreatureAngles
{
	float Angles[];
};

out vec4 oVertexColor;
out float oVertexDepth;

uniform mat4 uTransform;

void main()
{
	vec2 pos = Positions[gl_InstanceID];
	float rad = Radii[gl_InstanceID];
	float life = Lives[gl_InstanceID];
	float ang = Angles[gl_InstanceID];

	float finalRad = rad * (2.0 - life) / 2.0;
	float strokeSize = life * rad / 2.0;
	
	vec2 toRotate = (aPos.xy * finalRad + aNrm.xy * strokeSize);
	float cosAng = cos(ang);
	float sinAng = sin(ang);

	vec2 rotated = vec2(cosAng * toRotate.x - sinAng * toRotate.y, sinAng * toRotate.x + cosAng * toRotate.y);
	vec2 offset = pos + rotated;
	vec4 camTransformed = uTransform * vec4(offset.xy, 0.0, 1.0);
	gl_Position = camTransformed;

	// Vec3's are not supported by the std430 format, so we have to do this:
	uint colIndex = gl_InstanceID * 3;
	float r = Colors[colIndex];
	float g = Colors[colIndex + 1];
	float b = Colors[colIndex + 2];
	vec3 col = vec3(r, g, b);
	
	oVertexDepth = dot(toRotate, toRotate);
	oVertexColor = vec4(col.xyz, 1.0);
}