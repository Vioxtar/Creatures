#version 460 core

// Per vertex values
in float oVertexSquaredDistance;
in vec2 oEuclideanPos;

in float oShieldDirectionDot;
in vec2 oSpikeEuclideanPos;
in vec2 oFeederEuclideanPos;

// Per instance values
flat in vec4 oVertexColor;
flat in vec2 oSkinPattern;
flat in float oEnergy;
flat in float oSpikeState;
flat in float oFeederState;
flat in float oShieldState;
flat in float oShieldSpan;

out vec4 FragColor;
out float gl_FragDepth;

void main()
{
    
    // Display shading
    float shadingColMul = pow(1.0 - oVertexSquaredDistance, 0.25);

    // Display skin pattern
    float skinPatternColMul =
        mod(oVertexSquaredDistance, oSkinPattern.x) > oSkinPattern.y
        ? 1.1
        : 1.0;

    // Display forward direction
    float forwardDirXMul = oVertexSquaredDistance * 0.1;
    float forwardDirColMul = 
        oEuclideanPos.x > -forwardDirXMul &&
        oEuclideanPos.x < forwardDirXMul &&
        oEuclideanPos.y > 0
        ? 1.0 - oVertexSquaredDistance * 0.25
        : 1.0;
   
    // Display shield
    float shieldColMul =
        oShieldDirectionDot / oVertexSquaredDistance > (1.0 - oShieldSpan) &&
        oVertexSquaredDistance > 1.0 - 0.25 * oShieldState
        ? 1.25
        : 1.0;

    // Display spike
    float spikeYDist = 1.0 - oSpikeEuclideanPos.y; 
    float spikeXMul = oSpikeEuclideanPos.x * 2.0; // Make the base of the triangle narrower
    float spikeColMul =
        spikeYDist < 0.25 &&
        abs(spikeXMul) < spikeYDist * oSpikeState
        ? 1.25
        : 1.0;

    // Display feeder
    float feederYDist = 1.0 - oFeederEuclideanPos.y; 
    float feederXMul = oFeederEuclideanPos.x * 2.0; // Make the base of the triangle narrower
    float feederColMul =
        feederYDist < 0.25 &&
        abs(feederXMul) < 0.25 - feederYDist * oFeederState
        ? 1.25
        : 1.0;

    
    // Set final color
    FragColor =
        oVertexColor *
        shadingColMul *
        skinPatternColMul *
        forwardDirColMul *
        shieldColMul *
        spikeColMul *
        feederColMul;
    
    
    // Opaqueness reflects energy
    FragColor.a = max(pow(oVertexSquaredDistance, (1.0 - oEnergy) * 5.0), oEnergy + 0.1);
    FragColor.a *= 0.975; // Still make everything ever so slightly transparent

    // May not be needed
    gl_FragDepth = oVertexSquaredDistance;
}