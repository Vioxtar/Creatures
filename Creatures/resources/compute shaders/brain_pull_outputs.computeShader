#version 460 core

layout (std430, binding = 0) buffer CreatureBrainsStructures
{
	uint BrainsStructures[];
};

layout (std430, binding = 1) buffer CreatureBrainsNodes
{
	float BrainsNodes[];
};

layout (std430, binding = 2) buffer CreatureColors
{
	float Colors[];
};

layout (std430, binding = 3) buffer CreatureLives
{
	float Lives[];
};


layout (local_size_x = @LOCAL_SIZE@, local_size_y = 1, local_size_z = 1) in;

uniform uint uMaxNumOfStructureIndices;
uniform uint uMaxNumOfNodesInBrain;

void main()
{
	
	// EVERYTHING HERE IS HACKY AF

	uint gid = gl_GlobalInvocationID.x;
	uint colIndex = gid * 3;
	uint brainNodesStartIndex = gid * uMaxNumOfNodesInBrain;
	uint brainStructureStartIndex = gid * uMaxNumOfStructureIndices;

	uint numOfLevels = BrainsStructures[brainStructureStartIndex];
	uint outputLevelIndex = brainStructureStartIndex + numOfLevels;
	uint numOfOutputs = BrainsStructures[outputLevelIndex];

	// Find first output data index
	uint firstOutputIndex = (gid + 1) * uMaxNumOfNodesInBrain - numOfOutputs;

	//Colors[colIndex] = BrainsNodes[firstOutputIndex];
	//Colors[colIndex + 1] = BrainsNodes[firstOutputIndex + 1];
	//Colors[colIndex + 2] = BrainsNodes[firstOutputIndex + 2];
	//Lives[gid] = max(0.1, min(BrainsNodes[firstOutputIndex + 3], 1));
	
}