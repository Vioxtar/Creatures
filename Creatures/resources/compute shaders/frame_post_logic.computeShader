#version 460 core

readonly layout (std430, binding = 0) buffer CreatureSkinHues
{
	float SkinHues[];
};

readonly layout (std430, binding = 1) buffer CreatureSkinSaturations
{
	float SkinSaturations[];
};

readonly layout (std430, binding = 2) buffer CreatureSkinValues
{
	float SkinValues[];
};

layout (std430, binding = 3) buffer CreatureSkinRGBColors
{
	float SkinRGBColors[];
};

layout (local_size_x = @LOCAL_SIZE@, local_size_y = 1, local_size_z = 1) in;

uniform uint uCreatureCount;

vec3 HSVtoRGB(vec3 c) {
  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main()
{
	uint gid = gl_GlobalInvocationID.x;
	if (gid >= uCreatureCount)
	{
		return;
	}

	vec3 rgb = HSVtoRGB(vec3(SkinHues[gid], SkinSaturations[gid], SkinValues[gid]));
	
	uint colIndex = gid * 3;
	SkinRGBColors[colIndex] = rgb.x;
	SkinRGBColors[colIndex + 1] = rgb.y;
	SkinRGBColors[colIndex + 2] = rgb.z;

}