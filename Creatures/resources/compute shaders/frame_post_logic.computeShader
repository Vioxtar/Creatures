#version 460 core

readonly layout (std430, binding = 0) buffer CreatureSkinHues
{
	float SkinHues[];
};

readonly layout (std430, binding = 1) buffer CreatureSkinSaturations
{
	float SkinSaturations[];
};

readonly layout (std430, binding = 2) buffer CreatureSkinLightnesses
{
	float SkinLightnesses[];
};

layout (std430, binding = 3) buffer CreatureSkinRGBColors
{
	float SkinRGBColors[];
};

layout (local_size_x = @LOCAL_SIZE@, local_size_y = 1, local_size_z = 1) in;

uniform uint uCreatureCount;

vec3 HSVtoRGB(vec3 c) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float HueToRGB(float f1, float f2, float hue) {
	if (hue < 0.0)
		hue += 1.0;
	else if (hue > 1.0)
		hue -= 1.0;
	float res;
	if ((6.0 * hue) < 1.0)
		res = f1 + (f2 - f1) * 6.0 * hue;
	else if ((2.0 * hue) < 1.0)
		res = f2;
	else if ((3.0 * hue) < 2.0)
		res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
	else
		res = f1;
	return res;
}

vec3 HSLtoRGB(vec3 hsl) {
	vec3 rgb;
	
	if (hsl.y == 0.0) {
		rgb = vec3(hsl.z); // Luminance
	} else {
		float f2;
		
		if (hsl.z < 0.5)
			f2 = hsl.z * (1.0 + hsl.y);
		else
			f2 = hsl.z + hsl.y - hsl.y * hsl.z;
			
		float f1 = 2.0 * hsl.z - f2;
		
		rgb.r = HueToRGB(f1, f2, hsl.x + (1.0/3.0));
		rgb.g = HueToRGB(f1, f2, hsl.x);
		rgb.b = HueToRGB(f1, f2, hsl.x - (1.0/3.0));
	}
	
	return rgb;
}

void main()
{
	uint gid = gl_GlobalInvocationID.x;
	if (gid >= uCreatureCount)
	{
		return;
	}

	vec3 rgb = HSLtoRGB(vec3(SkinHues[gid], SkinSaturations[gid], SkinLightnesses[gid]));
	
	uint colIndex = gid * 3;
	SkinRGBColors[colIndex] = rgb.x;
	SkinRGBColors[colIndex + 1] = rgb.y;
	SkinRGBColors[colIndex + 2] = rgb.z;

}