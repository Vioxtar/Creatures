#version 460 core

layout (std430, binding = 0) buffer CreaturePositions
{
	vec2 Positions[];
};

layout (std430, binding = 1) buffer CreatureVelocities
{
	vec2 Velocities[];
};

layout (std430, binding = 2) buffer CreatureGeneralPurpose
{
	vec2 PhysicsFixes[];
};

layout (std430, binding = 3) buffer CreatureAngles
{
	float Angles[];
};

layout (std430, binding = 4) buffer CreatureAngleVelocities
{
	float AngleVelocities[];
};

layout (std430, binding = 5) buffer CreatureForwardDirections
{
	vec2 ForwardDirections[];
};


layout (local_size_x = @LOCAL_SIZE@, local_size_y = 1, local_size_z = 1) in;

uniform float uVelocityDownscale;
uniform float uAngleVelocityDownscale;

#define M_PI 3.1415926535897932384626433832795

void main()
{
	uint gid = gl_GlobalInvocationID.x;

	
	// Position and velocity

	// Acquire (and zerofiy) the physics fix calculated in the creature collision program
	vec2 physFix = PhysicsFixes[gid];
	PhysicsFixes[gid] = vec2(0, 0);

	vec2 pos = Positions[gid];
	vec2 vel = Velocities[gid];

	// First update velocity, only then set the position! Otherwise we get fucky collisions
	vel = vel * uVelocityDownscale + physFix;
	pos = pos + vel + physFix;
	
	
	Positions[gid] = pos;
	Velocities[gid] = vel;


	// Angle and angle velocity

	float ang = Angles[gid];
	float angVel = AngleVelocities[gid];

	angVel = angVel * uAngleVelocityDownscale;
	ang += angVel;

	Angles[gid] = mod(ang, M_PI * 2);
	AngleVelocities[gid] = angVel;



	// Forward direction
	ForwardDirections[gid] = vec2(-sin(ang), cos(ang));
	
}