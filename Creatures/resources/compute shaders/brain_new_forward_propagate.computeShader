#version 460 core

readonly restrict layout (std430, binding = 0) buffer CreatureBrainsStructures
{
	uint BrainsStructures[];
};

layout (std430, binding = 1) buffer CreatureBrainsNodes
{
	float BrainsNodes[];
};

readonly restrict layout (std430, binding = 2) buffer CreatureBrainsBiasesExponents
{
	vec2 BrainsBiasesExponents[];
};

readonly restrict layout (std430, binding = 3) buffer CreatureBrainsLinks
{
	float BrainsLinks[];
};

layout (std430, binding = 4) buffer CreatureLives
{
	float Lives[];
};


layout (local_size_x = @LOCAL_SIZE_X@, local_size_y = @LOCAL_SIZE_Y@, local_size_z = 1) in;

uniform uint uCreatureCount;
uniform uint uMaxNumOfStructureIndices;
uniform uint uMaxNumOfNodesInBrain;
uniform uint uMaxNumOfActivatedNodesInBrain;
uniform uint uMaxNumOfLinksInBrain;
uniform uint uLevelToCompute;

float ActivationFunctionHelper(float x, float exponent)
{
	if (x == 0.5)
	{
		return x;
	}
	if (x < 0.5)
	{
		return pow(2.0 * x, exponent) / 2.0;
	}
	else // x > 0.5
	{
		return 1.0 - pow(2.0 * (1.0 - x), exponent) / 2.0;
	}
}

float ActivationFunction(float x, float exponent)
{
	if (exponent < 0)
	{
		return -ActivationFunctionHelper(x, -exponent) + 1.0;
	}
	else
	{
		return ActivationFunctionHelper(x, exponent);
	}
}

void main()
{
	
	uint gid = gl_GlobalInvocationID.x;
	if (gid >= uCreatureCount)
	{
		return;
	}

	if (Lives[gid] <= 0.0)
	{
		return;
	}


	// Gather initial data about our structure
	uint brainStructureStartIndex = gid * uMaxNumOfStructureIndices;
	uint numOfLevels = BrainsStructures[brainStructureStartIndex];
	uint numOfInputs = BrainsStructures[brainStructureStartIndex + 1];


	// Bail if there are no more levels to be computed
	uint numOfLevelsToComputeInEntirePropagation = numOfLevels - 1;
	if (uLevelToCompute > numOfLevelsToComputeInEntirePropagation)
	{
		return;
	}


	// Find this creature's brain starting indices
	uint nodesStartIndex = gid * uMaxNumOfNodesInBrain;
	uint biasesExponentsStartIndex = gid * uMaxNumOfActivatedNodesInBrain;
	uint linksStartIndex = gid * uMaxNumOfLinksInBrain;


	// Find how much of the brain we've computed so far
	uint numOfNodesComputed = numOfInputs;
	uint numOfLinksComputed = 0;
	uint numOfActivatedNodesComputed = 0;
	for (uint levelComputed = 1; levelComputed < uLevelToCompute; ++levelComputed)
	{
		uint numOfNodesInComputedPrevLevel = BrainsStructures[brainStructureStartIndex + levelComputed];
		uint numOfNodesInComputedLevel = BrainsStructures[brainStructureStartIndex + 1 + levelComputed];

		numOfNodesComputed += numOfNodesInComputedLevel;
		numOfLinksComputed += numOfNodesInComputedPrevLevel * numOfNodesInComputedLevel;
		numOfActivatedNodesComputed += numOfNodesInComputedLevel;
	}


	// Find this level's starting indices
	uint nodesToComputeStartingIndex = nodesStartIndex + numOfNodesComputed;
	uint linksToComputeStartingIndex = linksStartIndex + numOfLinksComputed;
	uint biasesExponentsToComputeStartingIndex = biasesExponentsStartIndex + numOfActivatedNodesComputed;


	// Find how many nodes each worker needs to compute
	uint numOfNodesInLevelToCompute = BrainsStructures[brainStructureStartIndex + 1 + uLevelToCompute];
	uint numOfNodesPerWorker = numOfNodesInLevelToCompute / @LOCAL_SIZE_Y@;
	if (numOfNodesPerWorker * @LOCAL_SIZE_Y@ < numOfNodesInLevelToCompute)
	{
		numOfNodesPerWorker++;
	}

	// Find start/end indices of the previous level
	uint numOfNodesInPrevLevel = BrainsStructures[brainStructureStartIndex + uLevelToCompute];
	uint prevLevelNodeStart = nodesToComputeStartingIndex - numOfNodesInPrevLevel;
	uint prevLevelNodeEnd = nodesToComputeStartingIndex;


	// Find this worker's starting indices
	uint yWorkerID = gl_GlobalInvocationID.y;
	uint nodeStartIndexWorkerOffset = numOfNodesPerWorker * yWorkerID;
	uint linkStartIndexWorkerOffset = numOfNodesInPrevLevel * nodeStartIndexWorkerOffset;
	uint biasExponentStartIndexWorkerOffset = nodeStartIndexWorkerOffset;

	uint activeNode = nodesToComputeStartingIndex + nodeStartIndexWorkerOffset;
	uint activeLink = linksToComputeStartingIndex + linkStartIndexWorkerOffset;
	uint activeBiasExponent = biasesExponentsToComputeStartingIndex + biasExponentStartIndexWorkerOffset;

	// Compute
	uint nodesToComputeEndingIndex = nodesToComputeStartingIndex + numOfNodesInLevelToCompute;
	for (uint node = 0; node < numOfNodesPerWorker; node++)
	{
		if (activeNode >= nodesToComputeEndingIndex)
		{
			return;
		}

		float sum = 0.0;

		// Iterate the node links (and the corresponding nodes in the previous level)
		for (uint prevLevelNode = prevLevelNodeStart; prevLevelNode < prevLevelNodeEnd; prevLevelNode++)
		{
			sum += BrainsNodes[prevLevelNode] * BrainsLinks[activeLink];
			activeLink++; // We can simply advance our link index
		}

		// Set the new node value
		vec2 biasExponent = BrainsBiasesExponents[activeBiasExponent];
		float bias = biasExponent.x;
		float exponent = biasExponent.y;
		BrainsNodes[activeNode] = ActivationFunction(max(0.0, min(sum + bias, 1.0)), exponent);

		activeNode++;
		activeBiasExponent++;
	}
}