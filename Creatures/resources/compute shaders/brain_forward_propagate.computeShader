#version 460 core

layout (std430, binding = 0) buffer CreatureBrainsStructures
{
	uint BrainsStructures[];
};

layout (std430, binding = 1) buffer CreatureBrainsData
{
	float BrainsData[];
};

layout (local_size_x = @LOCAL_SIZE@, local_size_y = 1, local_size_z = 1) in;

uniform uint uMaxNumOfNodes;
uniform uint uMaxNumOfLinks;
uniform uint uMaxNumOfStructureIndices;
uniform uint uMaxNumOfFloatsInBrain;

void main()
{
	uint gid = gl_GlobalInvocationID.x;
	uint brainDataStartIndex = gid * uMaxNumOfFloatsInBrain;
	uint brainStructureStartIndex = gid * uMaxNumOfStructureIndices;
	
	// Make indexing easier
	uint nodesStartIndex = brainDataStartIndex;
	uint linksStartIndex = nodesStartIndex + uMaxNumOfNodes;

	uint numOfLevels = BrainsStructures[brainStructureStartIndex];
	uint numOfInputs = BrainsStructures[brainStructureStartIndex + 1];

	// Start forward propagation
	
	// Indices used to comfortably iterate the previous level's nodes' values
	uint prevLevelNodeStart = nodesStartIndex;
	uint prevLevelNodeEnd = nodesStartIndex + numOfInputs;

	// The active level/node/link being processed
	uint activeLevel = brainStructureStartIndex + 2; // + 2 and not + 1 to skip inputs level
	uint activeNode = nodesStartIndex + numOfInputs;
	uint activeLink = linksStartIndex;

	// Iterate levels (we don't actually use the level variable.. for now)
	for (uint level = 1; level < numOfLevels; level++) // level = 1 and not level = 0 to skip inputs level
	{
		uint numOfNodesInLevel = BrainsStructures[activeLevel];

		// Iterate nodes (we don't actually use the node variable.. for now)
		for (uint node = 0; node < numOfNodesInLevel; node++)
		{
			float sum = 0;

			// Iterate the node links (and the corresponding nodes in the previous level)
			for (uint prevLevelNode = prevLevelNodeStart; prevLevelNode < prevLevelNodeEnd; prevLevelNode++)
			{
				sum += BrainsData[prevLevelNode] * BrainsData[activeLink];
				activeLink++; // We can simply advance our link index
			}

			// Set the new node value
			BrainsData[activeNode] = sum; // @TODO: Sigmoid function here!

			activeNode++;
		}

		// Set the start/end node indices of the previous level for convenient iteration on the next level
		prevLevelNodeStart = prevLevelNodeEnd;
		prevLevelNodeEnd = prevLevelNodeEnd + numOfNodesInLevel;

		activeLevel++;
	}
}