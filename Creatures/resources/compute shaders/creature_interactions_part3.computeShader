#version 460 core

layout (std430, binding = 0) buffer CreatureCollidersCounts
{
	uint CollidersCounts[];
};

layout (std430, binding = 1) buffer CreatureCollidersGivenEnergy
{
	float CollidersGivenEnergy[];
};

layout (std430, binding = 2) buffer CreatureCollidersToPosDirs
{
	vec2 CollidersToPosDirs[];
};

layout (std430, binding = 3) buffer CreatureEnergies
{
	float Energies[];
};

layout (std430, binding = 4) buffer CreatureForwardDirections
{
	vec2 ForwardDirections[];
};

layout (std430, binding = 5) buffer CreatureLives
{
	float Lives[];
};

layout (std430, binding = 6) buffer CreatureHorninesses
{
	float Horninesses[];
};

layout (std430, binding = 7) buffer CreatureCollidersIndicesAndPlacements
{
	uvec2 CollidersIndicesAndPlacements[];
};

layout (std430, binding = 8) buffer CreatureNewBorns
{
	uvec2 NewBorns[];
};

layout (local_size_x = @LOCAL_SIZE@, local_size_y = 1, local_size_z = 1) in;


uniform uint uCreatureCount;
uniform uint uMaxNumOfColliders;

uniform float uCreatureReproductionEnergyCost;
uniform float uCreatureReproductionAimDotThreshold;

void main()
{
	uint gid = gl_GlobalInvocationID.x;
	if (gid >= uCreatureCount)
	{
		return;
	}

	if (Lives[gid] <= 0.0)
	{
		return;
	}


	// Get some stuff about ourselves
	float energy = Energies[gid];
	bool aHornyToReproduce = Horninesses[gid] > 0.5;
	vec2 aForwardDir = ForwardDirections[gid];
	
	// Iterate our given energies and add it to our actual energy, also take care of reproduction
	uint collidersCount = min(CollidersCounts[gid], uMaxNumOfColliders);
	uint collidersStartIndex = gid * uMaxNumOfColliders;
	for (uint i = 0; i < collidersCount; ++i)
	{
		float energyGivenByCollider = CollidersGivenEnergy[collidersStartIndex + i];
		energy += energyGivenByCollider;

		// Zerofiy the given energy
		CollidersGivenEnergy[collidersStartIndex + i] = 0.0;

		// Reproduction
		if (aHornyToReproduce)
		{
			if (energy >= uCreatureReproductionEnergyCost)
			{
				uvec2 colliderIndexAndPlacement = CollidersIndicesAndPlacements[collidersStartIndex + i];
				uint bGID = colliderIndexAndPlacement.x;

				bool bHornyToReproduce = Horninesses[bGID] > 0.5;
				if (bHornyToReproduce)
				{
					// Are we in reproduction positions?
					vec2 bForwardDir = ForwardDirections[bGID];

					if (-dot(aForwardDir, bForwardDir) > uCreatureReproductionAimDotThreshold)
					{
						// Place ourselves in the reproduction list - the CPU will take it from here
						uint currentAmountOfNewborns = atomicAdd(NewBorns[0].x, 1); // x component is our count
						NewBorns[currentAmountOfNewborns + 1] = uvec2(gid, bGID);

						// Take away from our energy
						energy -= uCreatureReproductionEnergyCost;
					}
				}
			}
		}
	}
	
	// Submit
	Energies[gid] = energy;

}