#version 460 core

layout (std430, binding = 0) buffer CreaturePositions
{
	vec2 Positions[];
};

layout (std430, binding = 1) buffer CreatureVelocities
{
	vec2 Velocities[];
};

layout (std430, binding = 2) buffer CreatureRadii
{
	float Radii[];
};

layout (local_size_x = @LOCAL_SIZE@, local_size_y = 1, local_size_z = 1) in;

uniform vec2 uSimDimensions;
uniform float uBorderRestitution;

void main()
{
	
	uint gid = gl_GlobalInvocationID.x;

	float violation;
	vec2 pos = Positions[gid];
	vec2 vel = Velocities[gid];
	float rad = Radii[gid];


	float rightBorder = uSimDimensions.x / 2.0;
	float leftBorder = -rightBorder;
	float upBorder = uSimDimensions.y / 2.0;
	float downBorder = -upBorder;
	


	// Right border
	violation = max(0, pos.x + rad - rightBorder);
	if (violation > 0.0)
	{
		pos.x -= violation;
		pos.x -= violation;
		vel.x *= -uBorderRestitution;
	} else

	// Left border
	violation = min(0, pos.x - rad - leftBorder);
	if (violation < 0.0)
	{
		pos.x -= violation;
		pos.x -= violation;
		vel.x *= -uBorderRestitution;
	}


	// Up border
	violation = max(0, pos.y + rad - upBorder);
	if (violation > 0.0)
	{
		pos.y -= violation;
		pos.y -= violation;
		vel.y *= -uBorderRestitution;
	} else

	
	// Down border
	violation = min(0, pos.y - rad - downBorder);
	if (violation < 0.0)
	{
		pos.y -= violation;
		pos.y -= violation;
		vel.y *= -uBorderRestitution;
	}


	Positions[gid] = pos;
	Velocities[gid] = vel;
}