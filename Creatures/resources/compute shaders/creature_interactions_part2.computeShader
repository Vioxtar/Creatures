#version 460 core

layout (std430, binding = 0) buffer CreatureCollidersCounts
{
	uint CollidersCounts[];
};

layout (std430, binding = 1) buffer CreatureCollidersIndicesAndPlacements
{
	uvec2 CollidersIndicesAndPlacements[];
};

layout (std430, binding = 2) buffer CreatureCollidersToPosDirs
{
	vec2 CollidersToPosDirs[];
};

layout (std430, binding = 3) buffer CreatureSpikes
{
	vec4 Spikes[];
};

layout (std430, binding = 4) buffer CreatureFeeders
{
	vec4 Feeders[];
};

layout (std430, binding = 5) buffer CreatureShields
{
	vec4 Shields[];
};

layout (std430, binding = 6) buffer CreatureCollidersGivenEnergy
{
	float CollidersGivenEnergy[];
};

layout (std430, binding = 7) buffer CreatureLives
{
	float Lives[];
};

layout (std430, binding = 8) buffer CreatureEnergies
{
	float Energies[];
};

layout (std430, binding = 9) buffer CreatureMeats
{
	float Meats[];
};

layout (std430, binding = 10) buffer CreatureMeatPriorities
{
	float MeatPriorities[];
};

layout (std430, binding = 11) buffer CreatureSkinHues
{
	float SkinHues[];
};


layout (local_size_x = @LOCAL_SIZE@, local_size_y = 1, local_size_z = 1) in;


uniform uint uCreatureCount;
uniform uint uMaxNumOfColliders;
uniform float uDeviceAimDotThreshold;

uniform float uCreatureFeederEffectiveness;
uniform float uCreatureSpikeVersusLifeEffectiveness;
uniform float uCreatureSpikeVersusMeatEffectiveness;
uniform float uCreatureShieldEffectiveness;
uniform float uCreatureMeatConsumptionEffectivenessMultiplierOnPriorityMatch;
uniform float uCreatureMeatConsumptionEffectivenessMultiplierOnPriorityMismatch;
uniform float uCreatureMeatConsumptionEffectivenessExponentOnPriorityMatch;
uniform float uCreatureMeatConsumptionEffectivenessExponentOnPriorityMismatch;

void main()
{
	uint gid = gl_GlobalInvocationID.x;
	if (gid >= uCreatureCount)
	{
		return;
	}

	uint collidersStartIndex = gid * uMaxNumOfColliders;
	uint collidersCount = min(CollidersCounts[gid], uMaxNumOfColliders);

	if (collidersCount <= 0)
	{
		return; // Nothing to do here
	}

	float life = Lives[gid];
	bool alive = life > 0.0;

	if (alive)
	{

		// We're alive, handle:
		// 1. Getting spiked by B (reduce our life)
		// 2. Feeding B (reduce our life, give energy to B)

		// Gather some information about ourselves
		vec4 aFeeder = Feeders[gid];
		vec4 aShield = Shields[gid];
		float aFeederState = aFeeder.z;
		vec2 aFeederDirection = aFeeder.xy;
		float aShieldState = aShield.z;
		vec2 aShieldDirection = aShield.xy;
		float aShieldSpan = aShield.w;

		float lifeLeft = life; // Reduced by getting spiked
		float energyLeft = Energies[gid]; // Reduced by feeding

		// Start collider iterations
		for (uint i = 0; i < collidersCount; ++i)
		{

			if (lifeLeft <= 0.0 && energyLeft <= 0.0)
			{
				break; // Nothing to be done here
			}

			// Acquire collider index
			uvec2 colliderIndexAndPlacement = CollidersIndicesAndPlacements[collidersStartIndex + i];
			uint bGID = colliderIndexAndPlacement.x;

			// Find the direction from B to us
			vec2 bColliderToUsDir = CollidersToPosDirs[collidersStartIndex + i];



			// Is B spiking us? If so, reduce our life

			vec4 bSpike = Spikes[bGID];
			float bSpikeState = bSpike.z;
			vec2 bSpikeDirection = bSpike.xy;
			bool gettingSpikedByB = dot(bSpikeDirection, bColliderToUsDir) > uDeviceAimDotThreshold;
			if (gettingSpikedByB)
			{
				float shieldFactor = (-dot(bSpikeDirection, aShieldDirection) >= 1.0 - aShieldSpan)
					? aShieldState * uCreatureShieldEffectiveness // @TODO: Drops if span rises!
					: 0.0;

				float spikeFactor = bSpikeState * uCreatureSpikeVersusLifeEffectiveness;

				float lifeReduction = min(spikeFactor * (1.0 - shieldFactor), lifeLeft);
				lifeLeft -= lifeReduction;
			}



			// Are we feeding B? If so, give B our energy
			bool feedingB = -dot(aFeederDirection, bColliderToUsDir) > uDeviceAimDotThreshold;
			if (feedingB)
			{
				// Does B have a shield?
				vec4 bShield = Shields[bGID];
				vec2 bShieldDirection = bShield.xy;
				float bShieldState = bShield.z;
				float bShieldSpan = bShield.w;
				

				float shieldFactor = (-dot(aFeederDirection, bShieldDirection) >= 1.0 - bShieldSpan)
					? bShieldState * uCreatureShieldEffectiveness // @TODO: Drops if span rises!
					: 0.0;

				float feederFactor = aFeederState * uCreatureFeederEffectiveness;

				float energyToGiveB = min(feederFactor * (1.0 - shieldFactor), energyLeft);
				energyLeft -= energyToGiveB;

				uint ourColliderPlacementIndexGivenByB = colliderIndexAndPlacement.y;
				CollidersGivenEnergy[ourColliderPlacementIndexGivenByB] = energyToGiveB;
			}
					   			 		  
		}


		// Write new life and energy values
		Energies[gid] = energyLeft;
		Lives[gid] = lifeLeft;


	} else {

		
		// We're dead, handle:
		// 1. Getting spiked by B (reduce our meat, give energy to B)

		// Gather some information about ourselves
		float aSkinHue = SkinHues[gid];
		float meatLeft = Meats[gid];

		// Start collider iterations
		for (uint i = 0; i < collidersCount; ++i)
		{
			if (meatLeft <= 0.0)
			{
				break; // Nothing to do here
			}

			// Acquire collider index
			uvec2 colliderIndexAndPlacement = CollidersIndicesAndPlacements[collidersStartIndex + i];
			uint bGID = colliderIndexAndPlacement.x;

			// Find the direction from B to us
			vec2 bColliderToUsDir = CollidersToPosDirs[collidersStartIndex + i];

			// Is B spiking us? If so, reduce our meat and give B energy in return

			vec4 bSpike = Spikes[bGID];
			float bSpikeState = bSpike.z;
			vec2 bSpikeDirection = bSpike.xy;
			bool gettingSpikedByB = dot(bSpikeDirection, bColliderToUsDir) > uDeviceAimDotThreshold;
			if (gettingSpikedByB)
			{
				// We don't care about our shields - we're dead!

				float bMeatPriority = MeatPriorities[bGID];
				float meatPriorityMatchFactor = abs(bMeatPriority - aSkinHue); // Raw distance between hue values
				meatPriorityMatchFactor = meatPriorityMatchFactor > 0.5 ? 1.0 - meatPriorityMatchFactor : meatPriorityMatchFactor; // Can't be more than 0.5, if it is we're getting closer from the other side (hue is cyclic)
				// meatPriorityMatchFactor = (meatPriorityMatchFactor - 0.25) * 4.0; // Map [0, 0.5] -> [-0.25, 0.25] -> [-1, 1]
				meatPriorityMatchFactor *= 2.0;// Map [0, 0.5] -> [0, 1]
				// meatPriorityMatchFactor = pow(meatPriorityMatchFactor, meatPriorityMatchFactor > 0.0 ? uCreatureMeatConsumptionEffectivenessExponentOnPriorityMatch : uCreatureMeatConsumptionEffectivenessExponentOnPriorityMismatch);
				// meatPriorityMatchFactor *= meatPriorityMatchFactor > 0.0 ? uCreatureMeatConsumptionEffectivenessMultiplierOnPriorityMatch : -uCreatureMeatConsumptionEffectivenessMultiplierOnPriorityMismatch;

				float spikeFactor = bSpikeState * uCreatureSpikeVersusMeatEffectiveness;

				float meatReduction = min(spikeFactor, meatLeft);
				meatLeft -= meatReduction;

				float energyToGiveB = meatReduction * meatPriorityMatchFactor; // @TODO: Meat to energy conversion scalar?

				uint ourColliderPlacementIndexGivenByB = colliderIndexAndPlacement.y;
				CollidersGivenEnergy[ourColliderPlacementIndexGivenByB] = energyToGiveB;
			}
		}

		// Write new meat values
		Meats[gid] = meatLeft;
	}
}