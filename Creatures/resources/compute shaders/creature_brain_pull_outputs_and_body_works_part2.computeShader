#version 460 core

layout (std430, binding = 0) buffer CreatureBrainsStructures
{
	uint BrainsStructures[];
};

layout (std430, binding = 1) buffer CreatureBrainsNodes
{
	float BrainsNodes[];
};

layout (std430, binding = 2) buffer CreatureLives
{
	float Lives[];
};

layout (std430, binding = 3) buffer CreatureEnergies
{
	float Energies[];
};

layout (std430, binding = 4) buffer CreatureMeats
{
	float Meats[];
};

layout (std430, binding = 5) buffer CreatureRadii
{
	float Radii[];
};

layout (std430, binding = 6) buffer CreatureHardnesses
{
	float Hardnesses[];
};

layout (std430, binding = 7) buffer CreatureSpikes
{
	vec4 Spikes[];
};

layout (std430, binding = 8) buffer CreatureShields
{
	vec4 Shields[];
};

layout (std430, binding = 9) buffer CreatureFeeders
{
	vec4 Feeders[];
};

layout (std430, binding = 10) buffer CreatureSkinvValues
{
	float SkinValues[];
};

layout (std430, binding = 11) buffer CreatureSkinSaturations
{
	float SkinSaturations[];
};

layout (std430, binding = 12) buffer CreatureVanishes
{
	uint Vanishes[];
};

layout (local_size_x = @LOCAL_SIZE@, local_size_y = 1, local_size_z = 1) in;


uniform uint uCreatureCount;

uniform uint uMaxNumOfStructureIndices;
uniform uint uMaxNumOfNodesInBrain;

uniform float uCreatureMaxEnergy;
uniform float uCreatureMaxMeat;
uniform float uCreatureMaxLife;

uniform float uCreatureEnergyToMeatConversionRate;
uniform float uCreatureMeatToEnergyConversionRate;
uniform float uCreatureEnergyToLifeConversionRate;

uniform float uCreatureMaxRadius;
uniform float uCreatureMinRadius;
uniform float uCreatureRadiusInterpolationRate;
uniform float uCreatureRadiusPercentageMeatWeight;
uniform float uCreatureRadiusPercentageMuscleWeight;

uniform float uCreatureMaxHardness;
uniform float uCreatureMinHardness;
uniform float uCreatureHardnessInterpolationRate;

uniform float uCreatureDeviceSpikeEnergyCost;
uniform float uCreatureDeviceShieldEnergyCost;
uniform float uCreatureDeviceFeederEnergyCost;

uniform float uCreatureDeviceStateInterpolationRate;

uniform float uCreatureMaxSkinValue;
uniform float uCreatureMinSkinValue;
uniform float uCreatureSkinValueInterpolationRate;

uniform float uCreatureLifeDrainOnNoEnergy;

uniform float uCreatureDeathWithMeatShrinkRate;
uniform float uCreatureDeathWithoutMeatShrinkRate;

uniform float uCreatureDeathExistenceRadiusThreshold;
uniform float uCreatureDeathHardnessTarget;
uniform float uCreatureDeathHardnessInterpolationRate;
uniform float uCreatureDeathDeviceZeroficationInterpolationRate;

uniform float uCreatureDeathSkinValueTarget;
uniform float uCreatureDeathSkinValueInterpolationRate;

uniform float uCreatureEnergyPercentageBasedDeviceStateMultiplierExponent;

void main()
{
	uint gid = gl_GlobalInvocationID.x;
	if (gid >= uCreatureCount)
	{
		return;
	}

	float life = Lives[gid];
	

	// Saturation reflects our life, dead or alive
	float lifePercentage = life / uCreatureMaxLife;
	SkinSaturations[gid] = lifePercentage;


	float energy = Energies[gid];

	// Energy to life, normally we'd place this under the 'alive' statement, but energy can regenerate life
	if (life < uCreatureMaxLife)
	{
		float maxLifeDiff = uCreatureMaxLife - life;
		float lifeAdd = min(maxLifeDiff, min(uCreatureEnergyToLifeConversionRate, energy));
		life += lifeAdd;
		energy -= lifeAdd;
	}

	bool alive = life > 0.0;

	if (alive)
	{
		// Life <-> Energy <-> Meat conversions

		float meat = Meats[gid];

		// Meat to energy
		if (energy < uCreatureMaxEnergy)
		{
			float maxEnergyDiff = uCreatureMaxEnergy - energy;
			float energyAdd = min(maxEnergyDiff, min(uCreatureMeatToEnergyConversionRate, meat));
			energy += energyAdd;
			meat -= energyAdd;
		}

		// Energy to meat
		if (energy > uCreatureMaxEnergy)
		{
			float excessEnergy = energy - uCreatureMaxEnergy;
			float meatAdd = min(excessEnergy, uCreatureEnergyToMeatConversionRate);
			meat += meatAdd;
			energy -= excessEnergy;
		}

		// No energy results in life drain
		if (energy <= 0.0)
		{
			life -= uCreatureLifeDrainOnNoEnergy;
		}


		// Get some stuff about our brain
		uint brainStructureStartIndex = gid * uMaxNumOfStructureIndices;
		uint numOfLevels = BrainsStructures[brainStructureStartIndex];
		uint outputLevelIndex = brainStructureStartIndex + numOfLevels;

		// Find the number of outputs and the starting output index to start reading from
		uint numOfOutputs = BrainsStructures[outputLevelIndex];
		uint firstOutputIndex = (gid + 1) * uMaxNumOfNodesInBrain - numOfOutputs;

		// Acquire brain outputs
		float radiusMuscle = max(0.0, min(BrainsNodes[firstOutputIndex + 12], 1.0));
		float hardnessMuscle = max(0.0, min(BrainsNodes[firstOutputIndex + 13], 1.0));
		float deviceSpikeStateMuscle = max(0.0, min(BrainsNodes[firstOutputIndex + 14], 1.0));
		float deviceShieldStateMuscle = max(0.0, min(BrainsNodes[firstOutputIndex + 15], 1.0));
		float deviceFeederStateMuscle = max(0.0, min(BrainsNodes[firstOutputIndex + 16], 1.0));
		float skinValueMuscle = max(0.0, min(BrainsNodes[firstOutputIndex + 17], 1.0));


		// Radius
		float radius = Radii[gid];
		float meatPercentage = meat / uCreatureMaxMeat;
		float targetRadiusPercentage =
			uCreatureRadiusPercentageMeatWeight * meatPercentage +
			uCreatureRadiusPercentageMuscleWeight * radiusMuscle;
		float targetRadius = uCreatureMinRadius + (uCreatureMaxRadius - uCreatureMinRadius) * targetRadiusPercentage;
		float newRadius = radius * (1.0 - uCreatureRadiusInterpolationRate) + uCreatureRadiusInterpolationRate * targetRadius;
		Radii[gid] = newRadius;


		// Hardness
		float hardness = Hardnesses[gid];
		float targetHardness = uCreatureMinHardness + (uCreatureMaxHardness - uCreatureMinHardness) * hardnessMuscle;
		float newHardness = hardness * (1.0 - uCreatureHardnessInterpolationRate) + uCreatureHardnessInterpolationRate * targetHardness;
		Hardnesses[gid] = newHardness;


		// Devices
		vec4 spike = Spikes[gid];
		vec4 feeder = Feeders[gid];
		vec4 shield = Shields[gid];
		spike.z = spike.z * (1.0 - uCreatureDeviceStateInterpolationRate) + uCreatureDeviceStateInterpolationRate * deviceSpikeStateMuscle;
		feeder.z = feeder.z * (1.0 - uCreatureDeviceStateInterpolationRate) + uCreatureDeviceStateInterpolationRate * deviceFeederStateMuscle;
		shield.z = shield.z * (1.0 - uCreatureDeviceStateInterpolationRate) + uCreatureDeviceStateInterpolationRate * deviceShieldStateMuscle;
		Spikes[gid] = spike;
		Feeders[gid] = feeder;
		Shields[gid] = shield;

		float energyToDeduct =
			deviceSpikeStateMuscle * uCreatureDeviceSpikeEnergyCost
			+ deviceShieldStateMuscle * uCreatureDeviceShieldEnergyCost
			+ deviceFeederStateMuscle * uCreatureDeviceFeederEnergyCost;

		energy -= energyToDeduct;


		// Skin values
		float skinValue = SkinValues[gid];
		float targetSkinValue = uCreatureMinSkinValue + (uCreatureMaxSkinValue - uCreatureMinSkinValue) * skinValueMuscle;
		SkinValues[gid] = skinValue * (1.0 - uCreatureSkinValueInterpolationRate) + uCreatureSkinValueInterpolationRate * targetSkinValue;


		// Write back energy/life/meat values, make sure they're clamped, even though they should already be clamped
		Energies[gid] = max(0.0, min(energy, uCreatureMaxEnergy));
		Lives[gid] = max(0.0, min(life, uCreatureMaxLife));
		Meats[gid] = max(0.0, min(meat, uCreatureMaxMeat));
	}
	else
	{
		// Shrink radius
		float radiusShrinkRate = Meats[gid] > 0.0 ? uCreatureDeathWithMeatShrinkRate : uCreatureDeathWithoutMeatShrinkRate;
		
		float radius = Radii[gid];
		radius *= (1.0 - radiusShrinkRate);

		Radii[gid] = radius;

		// If we're below the creature existence radius threshold, remove ourselves from the simulation
		if (radius < uCreatureDeathExistenceRadiusThreshold)
		{
			// Place ourselves in the vanishes list - the CPU will take it from here
			uint currentAmountOfCreaturesToVanish = atomicAdd(Vanishes[0], 1);
			Vanishes[currentAmountOfCreaturesToVanish + 1] = gid;
		}

		// We're dead but we're still in the simulation, interpolate hardness and device values to that of a creature corpse
		
		float hardness = Hardnesses[gid];
		Hardnesses[gid] = hardness * (1.0 - uCreatureDeathHardnessInterpolationRate) + uCreatureDeathHardnessTarget * uCreatureDeathHardnessInterpolationRate;

		vec4 spike = Spikes[gid];
		vec4 feeder = Feeders[gid];
		vec4 shield = Shields[gid];

		spike.z *= (1.0 - uCreatureDeathDeviceZeroficationInterpolationRate);
		feeder.z *= (1.0 - uCreatureDeathDeviceZeroficationInterpolationRate);
		shield.z *= (1.0 - uCreatureDeathDeviceZeroficationInterpolationRate);

		Spikes[gid] = spike;
		Feeders[gid] = feeder;
		Shields[gid] = shield;

		float skinValue = SkinValues[gid];
		SkinValues[gid] = skinValue * (1.0 - uCreatureDeathSkinValueInterpolationRate) + uCreatureDeathSkinValueTarget * uCreatureDeathSkinValueInterpolationRate;
	}	
}