#version 460 core

layout (std430, binding = 0) buffer CreaturePositions
{
	vec2 Positions[];
};

layout (std430, binding = 1) buffer UniformGrid
{
	uint UGrid[];
};

layout (std430, binding = 2) buffer CreatureTiles
{
	int Tiles[];
};



layout (local_size_x = @LOCAL_SIZE@, local_size_y = 1, local_size_z = 1) in;


uniform uint uCreatureCount;
uniform vec2 uSimDimensions;
uniform uvec2 uGridDimensions;
uniform uint uIndicesInTile;

void main()
{
	uint gid = gl_GlobalInvocationID.x;
	if (gid >= uCreatureCount)
	{
		return;
	}

	// Get some stuff
	float simWidth = uSimDimensions.x;
	float simHeight = uSimDimensions.y;
	
	uint gridXDim = uGridDimensions.x;
	uint gridYDim = uGridDimensions.y;

	// The first index is always the number of creatures already in the tile,
	// hence the true capacity is the tile buffer size - 1
	uint tileCreatureCapacity = uIndicesInTile - 1;
	
	// Find our tile index
	vec2 pos = Positions[gid];

	float remappedXPos = pos.x + (simWidth / 2.0);
	float remappedYPos = pos.y + (simHeight / 2.0);

	uint xTileIndex = uint(floor(remappedXPos * gridXDim / simWidth));
	uint yTileIndex = uint(floor(remappedYPos * gridYDim / simHeight));

	if (xTileIndex < 0 || xTileIndex >= gridXDim || yTileIndex < 0 || yTileIndex >= gridYDim)
	{
		// We're out of bounds (for some reason), safely bail
		Tiles[gid] = -1;
		return;
	}
	
	int tileIndex = int(xTileIndex) + int(gridXDim) * int(yTileIndex);

	// Regardless of whether or not we make it in a tile, store the tile to index so that we can unbind all tiles afterwards
	Tiles[gid] = tileIndex;


	// Find if we have room inside the tile
	uint tileCreaturesCountIndex = tileIndex * uIndicesInTile;
	uint numOfCreaturesAlreadyAssigned = atomicAdd(UGrid[tileCreaturesCountIndex], 1);

	if (numOfCreaturesAlreadyAssigned < tileCreatureCapacity)
	{

		// We have enough room, register
		uint placementIndex = tileCreaturesCountIndex + numOfCreaturesAlreadyAssigned + 1;
		UGrid[placementIndex] = gid;
	
	}

}